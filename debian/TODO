    debian/TODO for MisterHouse
    ===========================


- System user 'misterhouse' is created at installation time and removed when
  the package is purged. It will be the owner of the /usr/share/misterhouse
  directory, and will run the 'mh' daemon application(s). Are there any groups
  it should be in by default?


- Install the HTML documentation with the misterhouse-doc package, and do that
  so it can be installed by itself (i.e., not dependent on the main misterhouse 
  package also being installed).  
    - Correct entry in misterhouse-doc.doc-base for the 'Author:'
    - Rewrite entry in misterhouse-doc.doc-base for 'Abstract:'?
    - Include note about it in main package
    - Will a patch be needed for the main package because the html documenation
      may not be available as expected by default?


- Determine which deamons should be started at run time as well as if there
  should be just one init script or separate ones for things like mh_proxy or
  mh_send_server.pl. (Separate ones could enable those being separately packaged.)


- Architecture dependent MisterHouse package is misterhouse-xs.
    - Arch dependent packages that are required by MisterHouse?
        - Do have libtext-levenshteinxs-perl (Text::LevenshteinXS) included
          as a Recommends. Are there any other needed XS perl modules?
    - Are there any needed/required/useful non perl arch dependent packages?
    - Include a /usr/local/lib/misterhouse directory for use by the local admin
      for locally installed arch dependent MisterHouse specific files?
    - Document it: README.Debian in misterhouse package?  


- Determine just what files need to be installed and where, or even if they need
  to be in even the source package.

    - lib/site contains a large number of perl modules; no need to include them
      in the source or binary package(s) if they're already in Debian or at least
      on CPAN.  (If the latter; add a note for them to README.Debian and then
      investigate getting them into Debian.)

- Specifically review bin/* files for where or if they should be installed.
    - bin/mh.ini - patched version to /etc/misterhouse and as example
    - bin/mh.example.ini - install as example
    - bin/mh_proxy.ini - patched version to /etc/misterhouse and as example
    - 'bin/send_verizon' - for now, install as an example.
    - bin/*rc - Install as examples. (Also contribute new debian example when
      have that working.)
    - Install bin/get_email_rule_example.pl as an example instead of to lib dir?
    - Do not install bin/get_mail.wbt?

- bin/mh:
    - Installed to /usr/share/misterhouse/bin/mh
    - Review commented program lines for if they should be patched to be used. 

- bin/mh.ini:
    - Install it to /etc/misterhouse/mh.ini? To /usr/share/misterhouse/bin/mh.ini?
      Or just a symlink to it in /etc/misterhouse for the latter if it's needed there?
    - Install an unpatched version: with just the misterhouse-doc pkg? Main pkg?
      Will depend in part on how the /etc/misterhouse/mh.ini gets installed.
- /etc/misterhouse/mh.ini
    - Patch:  remove sections regarding viavoice and vv_tts?
    - Patch:  change default from "tk=1" to "tk=0" ?
    - Patch:  default code_dir_common to "/usr/share/misterhouse/common".
    - Patch:  default code_dir to "/usr/local/share/misterhouse/code"?
    - Patch:  default sounds_dir_common to "/usr/share/misterhouse/sounds".
    - Patch:  default sound_dir to "/usr/local/share/misterhouse/sounds"?


- Specifically review code/* files for where or if they should be installed.
    - Install code/common/ to /usr/share/misterhouse/common & patch the main
      mh.ini file to set code_dir_common for that?
    - If install the rest of the code/ subdirectories as examples, where to
      point the code_dir parameter to?  A /usr/local/ subdirectory? It looks
      like it is intended to be for the local admin.  


- sounds/
    - Install as /usr/share/misterhouse/sounds
    - Patch:  set as sound_dir_common in /etc/misterhouse/mh.ini


- data/
    - At least some of the subdirectories should be installed to the main
    /var/lib/misterhouse directory?  But which of the many files actually
    need to be installed except perhaps as examples.?
    - Use just the files named "empty_file" to enable installation of the 
    directories without warnings/errors regarding empty package directories
    from Lintian?

- data/ini/*.ini - Install as examples?


- web/
    - Install required MisterHouse web app files to /usr/share/misterhouse/web?
    - web/my_mh/
        - Install upstream of that in examples?
        - Default a config reference for it to /usr/local/share/misterhouse/web ?
        - Document how that goes in README.Debian
    - Review content for what should better be installed as examples.
        - web/ia#/ directories?
        - Document in README.Debian

  
- Detail Copyright & License as necessary for MisterHouse files for inclusion
  in debian/copyright.
  - 
  - Check what license these are; may need to remove and/or not install them
    but update debian/copyright regarding their associated files.
W: misterhouse: extra-license-file usr/share/misterhouse/web/SmoothGallery/license.txt
W: misterhouse: extra-license-file usr/share/misterhouse/web/comics/dailystrips/COPYING
W: misterhouse: extra-license-file usr/share/misterhouse/web/iphone/icons/LICENSE.TXT
W: misterhouse: extra-license-file usr/share/misterhouse/web/tattler/COPYING



- Determine non-perl package Depends/Recommends/Suggests for debian/control.
    - Should the Recommends for 'mpd' actually be 'mpd|mpd-client'? And should
      it be a Suggests instead?
    - Check for other authors and their licenses and add that as neccessary.
    - Check if there are files or directories which have a different copyright
      and/or license attached and that information added. Also determine if
      any such files actually need to be in the package.


- Perl Modules Depends/Recommended/Suggested for debian/control: review both
  the lib/site/* files as well as the included scripts in the bin/ & code/
  directories (debian/PerlModulesTODO.html)


- Convert README.md to an HTML file, install that instead.
    - Would need to add 'markdown' package to Build-Depends.
    - Install it to all packages? Just main misterhouse & misterhouse-doc?

- Use existing bin/update_docs in debian/rules to ensure that all upstream
  *.pod files etc are present, updated, & available for later installation.
    - That uses POD::HTML which is included in perl-modules, which means
      that the 'perl' package will definitely need to be included as a
      Build-Depends. (Still don't know if that will need to be versioned.)
    - Add a separate doc-base.faq for the faq*.html files? Use separate 
      ones instead of creating/adding an index page for it?
    - Use converted docs/updates.pod docs/updates.html as ChangeLog? Will need
      to patch it for v3.0, since it didn't get updated.
      
- Process the distributed *pod files, like 'mh.pod', as man pages as well as to
  html files if that's not already done?
    - Could use pod2man for this, which is part of the perl package. (Because
      it's not available in perl-base, may need to set the Build-Depends
      to a possibly versioned perl.)
      

- Currently have the 'bottlerocket' package as a Suggested. Add docs regarding
  it to the README.Debian file?  (Is it actually useful for the misterhouse
  application and/or user?)


- Configure it for use of a separate '/var/log/misterhouse' directory rather
  than have log files go to /var/lib/misterhouse/logs?  (Either way it would
  install as empty, so may need the Lintian override for that.)


- Determine a way for MisterHouse to run dwww so that on installs where it's
  the only web server application, the other locally installed documentation
  can be searched and viewed.  Add a note in README.Debian?  (If add a patch
  to always have such a link available, would need to add dwww as a package
  dependency.)  Use something like "html_alias_dwww = /var/www/dwww" plus 
  a link somewhere?  


- The process was changed so that code/examples is now installed to the directory
  doc/misterhouse-doc/examples/code with the misterhouse-doc package. Document
  that in README.Debian, perhaps in both packages?

- bin/mrwiki.pl is a modified version of UseModWiki, which is in Debian as
  usemod-wiki v1.0.5-1
    W: misterhouse: script-not-executable usr/share/misterhouse/web/bin/mrwiki.pl
    - See how they're different; patch as necessary to use usemod-wiki instead
    of bin/mrwiki and don't keep bin/mrwiki even for orig archive?

- Already are installing the files bin/xAP-bluetooth & bin/xAP-bluetooth.pl as
  examples. Install the other bin/xAP* files in the same way?


        - Lintian results from a test build on 23 June 2013

    - These don't even need to be in the orig archive? Just don't install? Do
    any of the web/iphone/WebApp files need be installed as anything but examples?
W: misterhouse-doc: windows-thumbnail-database-in-package usr/share/doc/misterhouse-doc/examples/iphone/WebApp/Design/Img/Thumbs.db.gz
W: misterhouse-doc: windows-thumbnail-database-in-package usr/share/doc/misterhouse-doc/examples/iphone/WebApp/Img/Thumbs.db.gz


    - Provided by libjs-jquery package. Replace with package dependency plus
      sym link? Just remove plus document in README.Debian?
W: misterhouse: embedded-javascript-library usr/share/misterhouse/web/js/jquery.min.js
W: misterhouse-doc: embedded-javascript-library usr/share/doc/misterhouse-doc/examples/iphone/jquery/jquery.min.js


    - Provided by libjs-mootools package. Replace with package dependency
      ('Suggested'?) plus sym link? Just remove plus document in README.Debian?
W: misterhouse-doc: embedded-javascript-library usr/share/doc/misterhouse-doc/examples/slideshow/js/mootools.js
W: misterhouse-doc: embedded-javascript-library usr/share/doc/misterhouse-doc/examples/SmoothGallery/scripts/mootools.v1.11.js


    - This is intended to be part of the documentation and will not be executed
      there. Override? It does appear to be available in Debian as the package
      libjs-prototype; replace with an info file noting that? Just remove, plus
      document in README.Debian? (And might that pkg info be pushed upstream?)
W: misterhouse-doc: embedded-javascript-library usr/share/doc/misterhouse-doc/examples/code/SOAP_examples/html/scripts/prototype.js


        - dailystrips related
    - Install some of this as examples, remove the rest?
web/comics
    - Include as an empty /var/lib/misterhouse/www/comics directory?  
    - Reference as something like /usr/local/share/mistershouse/web/comics and
      provide docs and default config? Perhaps only using that directory as an
      example and not actually providing such a directory with the installation?
    W: misterhouse: script-not-executable usr/share/misterhouse/web/comics/dailystrips/dailystrips-update
    W: misterhouse: script-not-executable usr/share/misterhouse/web/comics/dailystrips/install.pl
web/comics/dailystrips/ 
    - Do not install with misterhouse
    - Do not even include with orig archive?
    - 'dailystrips' added to package as Suggested
    - Add documentation for it specifically for mistershouse. To README.Debian?
web/comics/dailystrips-2003.02.12.html - if kept as example, patch file to point to online version?
web/comics/dailystrips-2002.02.28.html - if kept as example, patch file to point to online version?
web/comics/index.html   -   Include file as an example?
    - Reported to upstream using pull request #161, which was accepted & merged on 14 Apr 2013.
      Removal should show up in the next stable release; will need to then update README.source
      and the get-orig-source script.
web/comics/FoxTrot-2003.02.12.gif 
web/comics/Dilbert-2002.02.28.gif


    - Update/change patch(s) to remove the shabang line altogether? Bascially, none
      of the rest of the web/bin/*pl files have them. 
    - (2013/06/23) For the moment, correcting the permissions in debian/rules.
W: misterhouse: script-not-executable usr/share/misterhouse/web/bin/test_cgi.pl
W: misterhouse: script-not-executable usr/share/misterhouse/web/bin/test_cgi_error.pl
W: misterhouse: script-not-executable usr/share/misterhouse/web/bin/video_streamer.pl


    - Just use debian/rules to correct executable settings in web/*?
    - (2013/06/23) For the moment, correcting the permissions in debian/rules.
W: misterhouse: executable-not-elf-or-script usr/share/misterhouse/web/lib/default.xsl
W: misterhouse: executable-not-elf-or-script usr/share/misterhouse/web/lib/xml2js.xslt
W: misterhouse: executable-not-elf-or-script usr/share/misterhouse/web/misc/actiontec_traffic.html


